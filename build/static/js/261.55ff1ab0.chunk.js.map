{"version":3,"file":"static/js/261.55ff1ab0.chunk.js","mappings":"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","sources":["components/Admin/Sidebar/AdminNavbar.js","components/Admin/Sidebar/CompletedOrders.js","components/Admin/Sidebar/SidebarData.js"],"sourcesContent":["import Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport { Navbar } from 'react-bootstrap';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport './Navbar.css'\nimport { SidebarData } from './SidebarData';\nfunction AdminNavbar() {\n  return (\n    <>\n      \n        <Navbar bg=\"dark\" variant='dark' expand={false}>\n          <Container fluid>\n            \n            <Navbar.Toggle  />\n            <Navbar.Offcanvas\n              placement=\"start\"\n            >\n              <Offcanvas.Header closeButton>\n                <Offcanvas.Title >\n                  Admin Panel\n                </Offcanvas.Title>\n              </Offcanvas.Header>\n              <Offcanvas.Body style={{backgroundColor:'black',fontSize:'20px'}}>\n                <Nav className=\"justify-content-start flex-grow-1 pe-3\">\n\n                {SidebarData.map((item, index) => {\n                return (\n                    <Nav.Link  href={\"/#\"+item.path} className={item.cName}>{item.icon}<span className='span'> </span>{item.title}</Nav.Link>\n                    \n                );\n                })}\n                  \n                </Nav>\n                \n              </Offcanvas.Body>\n            </Navbar.Offcanvas>\n          </Container>\n        </Navbar>\n      \n    </>\n  );\n}\n\nexport default AdminNavbar;","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Container ,Table,Accordion,Button} from 'react-bootstrap';\r\nimport AdminNavbar from \"./AdminNavbar\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Toast, ToastBody, ToastHeader } from \"reactstrap\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport url from \"../../../Uri\";\r\n\r\nfunction CompletedOrders(){\r\n    const [completedOrders,SetCompletedOrders] = useState([]);\r\n    const [isCompletedOrdersFetched,SetIsCompletedOrdersFetched] = useState(false);\r\n    // var uri = \"http://mahavirbackend-env.eba-bkwmcbpz.us-east-1.elasticbeanstalk.com\";\r\n    // var uri=\"?localhost:8080\";\r\n    useEffect(()=>{\r\n        if(!isCompletedOrdersFetched){\r\n            axios.get(url+\"/completed-orders\")\r\n                .then(function(response){\r\n                    if(response.status==200){\r\n                        console.log(\"Response success:\",response.data);\r\n                        SetCompletedOrders(response.data);\r\n                        SetIsCompletedOrdersFetched(true);\r\n                    }else{\r\n                        console.log(\"Response error:\",response);\r\n                    }\r\n                }).catch(function(error){\r\n                    console.log(\"Error in completed-orders\");\r\n\r\n                })\r\n        }\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            <AdminNavbar/>\r\n            <Container className=\"pendingdeliveries\">\r\n            <h4 style={{margin:20,textAlign:\"center\"}}>Completed Orders</h4>\r\n\r\n                <Table striped bordered hover >\r\n                    <thead>\r\n                        <tr>\r\n                        <th>Order Id</th>\r\n                        <th>Email</th>\r\n                        <th>Buy Date</th>\r\n                        <th>Delivery Date</th>\r\n                        <th>Address</th>\r\n                        <th>Mobile Number</th>\r\n                        <th>Payment Amount</th>\r\n                        <th>Payment Mode</th>\r\n                        <th>Invoice</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            (isCompletedOrdersFetched)?(\r\n                                completedOrders.map((order,index)=>{\r\n                                    return(\r\n                                        <tr>\r\n                                            <td>{order.orderId}</td>\r\n                                            <td>{order.buyerEmail}</td>\r\n                                            <td>{order.buyDate}</td>\r\n                                            <td>{order.deliveryDate}</td>\r\n                                            <td>{order.userAddress.address+\",\"+order.userAddress.city+\"-\"+order.userAddress.pincode}</td>\r\n                                            <td>{order.userAddress.mobileNumber}</td>\r\n                                            <td>{order.paymentAmount}</td>\r\n                                            <td>{order.paymentMode}</td>\r\n                                            <td>üëÅÔ∏è‚Äçüó®Ô∏è</td>\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            ):(\r\n                                null\r\n                            )\r\n                        }\r\n                        {/* <tr>\r\n                        <td>1</td>\r\n                        <td>Mark</td>\r\n                        <td>Otto</td>\r\n                        <td>@mdo</td>\r\n                        </tr> */}\r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n\r\n            <Accordion flush className=\"mobileviewpendingorders\">\r\n             {\r\n                        (isCompletedOrdersFetched)?(\r\n                            completedOrders.map((order,index)=>{\r\n                                return(\r\n                                    <>\r\n                                    <Accordion.Item eventKey={ index}>\r\n        <Accordion.Header>Order Id: {order.orderId}</Accordion.Header>\r\n        <Accordion.Body>\r\n        <Table>\r\n            <tbody>\r\n                                    <tr><td><b>Order Id: </b>{order.orderId}</td></tr>\r\n                                        \r\n                                       <tr><td><b>Email: </b>{order.buyerEmail}</td></tr>\r\n                                       <tr><td><b>Buy Date: </b>{order.buyDate}</td></tr>\r\n                                       <tr><td><b>Address: </b>{order.userAddress.address+\",\"+order.userAddress.city+\"-\"+order.userAddress.pincode}</td></tr>\r\n                                       <tr><td><b>Contact: </b>{order.userAddress.mobileNumber}</td></tr>\r\n                                       <tr><td><b>Payment Amount: </b>{order.paymentAmount}</td></tr>\r\n                                       <tr><td><b>Payment Mode: </b>{order.paymentMode}</td></tr>\r\n                                       <tr><td><b>Invoice: </b><Button >üëÅÔ∏è‚Äçüó®Ô∏è</Button></td></tr>\r\n                                       </tbody>\r\n        </Table>\r\n                                       </Accordion.Body>\r\n      </Accordion.Item>\r\n                                       </>\r\n                                );\r\n                            })\r\n                        ):(\r\n                            null\r\n                        )\r\n                    }\r\n                    </Accordion>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompletedOrders;","import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\nimport * as MdIcons from 'react-icons/md';\nimport * as RiIcons from 'react-icons/ri';\n\nexport const SidebarData = [\n  {\n    title: 'Add Item',\n    path: '/admin',\n    icon: <AiIcons.AiFillHome />,\n    cName: 'nav-text'\n  },\n  \n  {\n    title: 'Pending Orders',\n    path: '/pendingdelivery',\n    icon: <MdIcons.MdOutlineDeliveryDining />,\n    cName: 'nav-text'\n  },\n  {\n    title: 'Completed Orders',\n    path: '/completedorders',\n    icon: <MdIcons.MdOutlineDeliveryDining />,\n    cName: 'nav-text'\n  },\n  {\n    title: 'User Complaints',\n    path: '/allcomplaints',\n    icon: <RiIcons.RiFileList2Fill />,\n    cName: 'nav-text'\n  },\n\n  {\n    title: 'Add New',\n    path:'/AddNew',\n    icon: <MdIcons.MdOutlineProductionQuantityLimits/>,\n    cName: 'nav-text'\n  },\n  \n  {\n    title: 'Logout',\n    path: '/',\n    icon: <RiIcons.RiLogoutBoxRFill />,\n    cName: 'nav-text'\n  },\n  {\n    title: 'Upload Excel',\n    path:'/upload',\n    icon: <AiIcons.AiOutlineUpload/>,\n    cName: 'nav-text'\n  },\n];"],"names":["bg","variant","expand","fluid","placement","closeButton","style","backgroundColor","fontSize","className","SidebarData","item","index","href","path","cName","icon","title","useState","completedOrders","SetCompletedOrders","isCompletedOrdersFetched","SetIsCompletedOrdersFetched","useEffect","axios","url","then","response","status","console","log","data","catch","error","margin","textAlign","striped","bordered","hover","map","order","orderId","buyerEmail","buyDate","deliveryDate","userAddress","address","city","pincode","mobileNumber","paymentAmount","paymentMode","flush","eventKey"],"sourceRoot":""}